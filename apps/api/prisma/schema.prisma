// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(uuid())
  username      String      @unique
  name          String
  email         String      @unique
  image         String
  password      String
  datecreated   DateTime    @default(now())
  dateupdated   DateTime    @updatedAt
  userPlants    UserPlant[]
  blogPosts     BlogPost[]
  comments      Comment[]
  likes         Like[]
  greenhouses   Greenhouse[]
  refreshTokens RefreshToken[]
  irrigations   Irrigation[]
}

model Plant {
  id                      String          @id @default(uuid())
  name                    String       @unique
  description             String
  dateadded               DateTime     @default(now())
  air_temperature_initial Float
  air_humidity_initial    Float
  soil_moisture_initial   Int
  soil_temperature_initial Float
  light_intensity_initial Float
  air_temperature_final   Float
  air_humidity_final      Float
  soil_moisture_final     Int
  soil_temperature_final  Float
  light_intensity_final   Float
  userPlants              UserPlant[]
  irrigations             Irrigation[]
}

model UserPlant {
  id              String      @id @default(uuid())
  userId          String
  plantId         String
  user            User     @relation(fields: [userId], references: [id])
  plant           Plant    @relation(fields: [plantId], references: [id])
  nickname        String?
  dateAdded       DateTime @default(now())
  sensorReadings  Sensor[]

  @@unique([userId, plantId])
}

model Sensor {
  id               String       @id @default(uuid())
  userPlantId      String
  userPlant        UserPlant @relation(fields: [userPlantId], references: [id])
  air_temperature  Float
  air_humidity     Float
  soil_moisture    Int
  soil_temperature Float
  light_intensity  Float
  water_level      Float
  water_reserve    Float
  timecreated      DateTime  @default(now())
}

model BlogPost {
  id          String    @id @default(uuid())
  title       String
  slug        String    @unique
  content     String
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  published   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  comments    Comment[]
  likes       Like[]
  
  @@index([authorId])
  @@index([slug])
}

model Comment {
  id          String    @id @default(uuid())
  content     String
  blogPostId  String
  blogPost    BlogPost  @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([blogPostId])
  @@index([authorId])
}

model Like {
  id          String    @id @default(uuid())
  blogPostId  String
  blogPost    BlogPost  @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())

  @@unique([userId, blogPostId])
  @@index([blogPostId])
}

// Pump operation tracking model
model PumpOperation {
  id               String      @id @default(uuid())
  greenhouseId     String      
  greenhouse       Greenhouse  @relation(fields: [greenhouseId], references: [id], onDelete: Cascade)
  duration         Int         // Duration in seconds
  waterAmount      Float?      // Target water amount in liters
  reason           String?     // Reason for activation
  startedAt        DateTime    @default(now())
  endedAt          DateTime?   // When operation completed
  status           String      @default("active") // active, completed, cancelled, error
  errorMessage     String?     // Error details if status is error
  esp32Response    String?     // Response from ESP32 device
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  @@index([greenhouseId])
  @@index([status])
  @@index([startedAt])
}

// Device management model for ESP32 devices
model Device {
  id               String      @id @default(uuid())
  name             String
  greenhouseId     String      
  greenhouse       Greenhouse  @relation(fields: [greenhouseId], references: [id], onDelete: Cascade)
  type             String      @default("esp32") // Device type
  ipAddress        String?     // Current IP address
  macAddress       String?     @unique // MAC address for identification
  isOnline         Boolean     @default(false)
  lastSeen         DateTime?   // Last communication timestamp
  firmwareVersion  String?     // Current firmware version
  configuration    Json?       // Device-specific configuration
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  @@index([greenhouseId])
  @@index([type])
  @@index([isOnline])
}

// Greenhouse model for managing smart greenhouse environments
model Greenhouse {
  id               String      @id @default(uuid())
  name             String
  description      String?
  location         String?     // Physical location or address
  ownerId          String
  owner            User        @relation(fields: [ownerId], references: [id])
  
  // Current environmental conditions
  currentTemperature    Float?   // Current air temperature in Celsius
  currentHumidity       Float?   // Current air humidity percentage
  currentSoilMoisture   Int?     // Current soil moisture percentage
  currentLightIntensity Float?   // Current light intensity
  currentWaterLevel     Float?   // Current water tank level
  
  // Configuration and thresholds
  targetTemperature     Float    @default(25.0)  // Target temperature
  targetHumidity        Float    @default(60.0)  // Target humidity
  targetSoilMoisture    Int      @default(50)    // Target soil moisture
  minWaterLevel         Float    @default(20.0)  // Minimum water level alert
  
  // Device and connectivity information
  deviceId             String?   @unique  // Associated ESP32 device ID
  wifiSSID             String?   // WiFi network name
  wifiPassword         String?   // WiFi password (encrypted)
  isOnline             Boolean   @default(false)
  lastDataUpdate       DateTime? // Last sensor data received
  
  // QR Code configuration
  qrCodeData           String?   // Encrypted QR code payload
  qrCodeGeneratedAt    DateTime? // When QR code was generated
  isConfigured         Boolean   @default(false) // Whether device is configured
  
  // Timestamps
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  
  // Relations
  devices              Device[]
  pumpOperations       PumpOperation[]
  sensorReadings       GreenhouseSensorReading[]
  irrigations          Irrigation[]
  
  @@index([ownerId])
  @@index([deviceId])
  @@index([isOnline])
  @@index([lastDataUpdate])
}

// Enhanced sensor readings specific to greenhouse monitoring
model GreenhouseSensorReading {
  id               String      @id @default(uuid())
  greenhouseId     String
  greenhouse       Greenhouse  @relation(fields: [greenhouseId], references: [id], onDelete: Cascade)
  
  // Environmental sensors
  airTemperature   Float
  airHumidity      Float
  soilMoisture     Int
  soilTemperature  Float?
  lightIntensity   Float
  waterLevel       Float
  waterReserve     Float?
  
  // Device information
  deviceId         String?     // ESP32 device that sent the data
  batteryLevel     Float?      // Battery level percentage
  signalStrength   Int?        // WiFi signal strength (RSSI)
  
  // Metadata
  timestamp        DateTime    @default(now())
  isValid          Boolean     @default(true)  // Data validation flag
  errorMessage     String?     // Any error during reading
  
  // Relations
  irrigations      Irrigation[]
  
  @@index([greenhouseId])
  @@index([timestamp])
  @@index([deviceId])
}

// Refresh token model for secure session management
model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
  isRevoked Boolean  @default(false)
  
  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

// Irrigation tracking model for monitoring watering events
model Irrigation {
  id               String      @id @default(uuid())
  type             String      // 'manual', 'automatic', 'detected'
  waterAmount      Float?      // Amount of water in liters
  notes            String?     // Additional notes or reason
  greenhouseId     String
  greenhouse       Greenhouse  @relation(fields: [greenhouseId], references: [id], onDelete: Cascade)
  userId           String?     // User who performed manual irrigation
  user             User?       @relation(fields: [userId], references: [id])
  plantId          String?     // Specific plant if applicable
  plant            Plant?      @relation(fields: [plantId], references: [id])
  sensorId         String?     // Sensor that detected irrigation
  sensor           GreenhouseSensorReading? @relation(fields: [sensorId], references: [id])
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  @@index([greenhouseId])
  @@index([type])
  @@index([createdAt])
  @@index([userId])
}
