generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  name          String
  email         String         @unique
  image         String
  password      String
  datecreated   DateTime       @default(now())
  dateupdated   DateTime       @updatedAt
  username      String         @unique
  blogPosts     BlogPost[]
  comments      Comment[]
  greenhouses   Greenhouse[]
  irrigations   Irrigation[]
  likes         Like[]
  notifications Notification[]
  refreshTokens RefreshToken[]
  userPlants    UserPlant[]
}

model Plant {
  id                       String       @id @default(uuid())
  name                     String       @unique
  description              String
  dateadded                DateTime     @default(now())
  air_humidity_final       Float
  air_humidity_initial     Float
  air_temperature_final    Float
  air_temperature_initial  Float
  light_intensity_final    Float
  light_intensity_initial  Float
  soil_moisture_final      Int
  soil_moisture_initial    Int
  soil_temperature_final   Float
  soil_temperature_initial Float
  irrigations              Irrigation[]
  userPlants               UserPlant[]
}

model UserPlant {
  id             String      @id @default(uuid())
  userId         String
  plantId        String
  nickname       String?
  dateAdded      DateTime    @default(now())
  greenhouseId   String?
  reports        Report[]
  sensorReadings Sensor[]
  greenhouse     Greenhouse? @relation(fields: [greenhouseId], references: [id])
  plant          Plant       @relation(fields: [plantId], references: [id])
  user           User        @relation(fields: [userId], references: [id])

  @@unique([userId, plantId])
}

model Sensor {
  id               String    @id @default(uuid())
  air_temperature  Float
  air_humidity     Float
  soil_moisture    Int
  soil_temperature Float
  light_intensity  Float
  water_level      Float
  water_reserve    Float
  timecreated      DateTime  @default(now())
  userPlantId      String
  userPlant        UserPlant @relation(fields: [userPlantId], references: [id])
}

model BlogPost {
  id        String    @id @default(uuid())
  title     String
  slug      String    @unique
  content   String
  authorId  String
  published Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    User      @relation(fields: [authorId], references: [id])
  comments  Comment[]
  likes     Like[]

  @@index([authorId])
  @@index([slug])
}

model Comment {
  id         String   @id @default(uuid())
  content    String
  blogPostId String
  authorId   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  author     User     @relation(fields: [authorId], references: [id])
  blogPost   BlogPost @relation(fields: [blogPostId], references: [id], onDelete: Cascade)

  @@index([blogPostId])
  @@index([authorId])
}

model Like {
  id         String   @id @default(uuid())
  blogPostId String
  userId     String
  createdAt  DateTime @default(now())
  blogPost   BlogPost @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, blogPostId])
  @@index([blogPostId])
}

model PumpOperation {
  id            String     @id @default(uuid())
  greenhouseId  String
  duration      Int
  waterAmount   Float?
  reason        String?
  startedAt     DateTime   @default(now())
  endedAt       DateTime?
  status        String     @default("active")
  errorMessage  String?
  esp32Response String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  greenhouse    Greenhouse @relation(fields: [greenhouseId], references: [id], onDelete: Cascade)

  @@index([greenhouseId])
  @@index([status])
  @@index([startedAt])
}

model Device {
  id              String     @id @default(uuid())
  name            String
  greenhouseId    String
  type            String     @default("esp32")
  ipAddress       String?
  macAddress      String?    @unique
  isOnline        Boolean    @default(false)
  lastSeen        DateTime?
  firmwareVersion String?
  configuration   Json?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  greenhouse      Greenhouse @relation(fields: [greenhouseId], references: [id], onDelete: Cascade)

  @@index([greenhouseId])
  @@index([type])
  @@index([isOnline])
}

model Greenhouse {
  id                    String                    @id @default(uuid())
  name                  String
  description           String?
  location              String?
  ownerId               String
  currentTemperature    Float?
  currentHumidity       Float?
  currentSoilMoisture   Int?
  currentLightIntensity Float?
  currentWaterLevel     Float?
  targetTemperature     Float                     @default(25.0)
  targetHumidity        Float                     @default(60.0)
  targetSoilMoisture    Int                       @default(50)
  minWaterLevel         Float                     @default(20.0)
  deviceId              String?                   @unique
  wifiSSID              String?
  wifiPassword          String?
  isOnline              Boolean                   @default(false)
  lastDataUpdate        DateTime?
  qrCodeData            String?
  qrCodeGeneratedAt     DateTime?
  isConfigured          Boolean                   @default(false)
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt
  latitude              Float?
  longitude             Float?
  devices               Device[]
  owner                 User                      @relation(fields: [ownerId], references: [id])
  sensorReadings        GreenhouseSensorReading[]
  irrigations           Irrigation[]
  pumpOperations        PumpOperation[]
  userPlants            UserPlant[]
  weatherData           WeatherData[]

  @@index([ownerId])
  @@index([deviceId])
  @@index([isOnline])
  @@index([lastDataUpdate])
}

model GreenhouseSensorReading {
  id              String       @id @default(uuid())
  greenhouseId    String
  airTemperature  Float
  airHumidity     Float
  soilMoisture    Int
  soilTemperature Float?
  lightIntensity  Float
  waterLevel      Float
  waterReserve    Float?
  deviceId        String?
  batteryLevel    Float?
  signalStrength  Int?
  timestamp       DateTime     @default(now())
  isValid         Boolean      @default(true)
  errorMessage    String?
  greenhouse      Greenhouse   @relation(fields: [greenhouseId], references: [id], onDelete: Cascade)
  irrigations     Irrigation[]

  @@index([greenhouseId])
  @@index([timestamp])
  @@index([deviceId])
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  isRevoked Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

model Irrigation {
  id           String                   @id @default(uuid())
  type         String
  waterAmount  Float?
  notes        String?
  greenhouseId String
  userId       String?
  plantId      String?
  sensorId     String?
  createdAt    DateTime                 @default(now())
  updatedAt    DateTime                 @updatedAt
  greenhouse   Greenhouse               @relation(fields: [greenhouseId], references: [id], onDelete: Cascade)
  plant        Plant?                   @relation(fields: [plantId], references: [id])
  sensor       GreenhouseSensorReading? @relation(fields: [sensorId], references: [id])
  user         User?                    @relation(fields: [userId], references: [id])

  @@index([greenhouseId])
  @@index([type])
  @@index([createdAt])
  @@index([userId])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  type      String
  title     String
  message   String
  data      Json?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@index([type])
}

model WeatherData {
  id           String     @id @default(uuid())
  greenhouseId String
  date         DateTime
  maxTemp      Float
  minTemp      Float
  avgTemp      Float
  maxHumidity  Float
  minHumidity  Float
  avgHumidity  Float
  totalPrecip  Float
  avgWind      Float?
  maxWind      Float?
  condition    String?
  sunrise      String?
  sunset       String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  greenhouse   Greenhouse @relation(fields: [greenhouseId], references: [id], onDelete: Cascade)

  @@unique([greenhouseId, date])
  @@index([greenhouseId])
  @@index([date])
}

model Report {
  id               String    @id @default(uuid())
  userPlantId      String
  type             String
  startDate        DateTime
  endDate          DateTime
  totalReadings    Int
  totalIrrigations Int
  avgGrowthRate    Float?
  summary          String?
  aiInsights       Json?
  recommendations  Json?
  weatherSummary   Json?
  generatedAt      DateTime  @default(now())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  userPlant        UserPlant @relation(fields: [userPlantId], references: [id], onDelete: Cascade)

  @@index([userPlantId])
  @@index([type])
  @@index([startDate])
  @@index([endDate])
}
