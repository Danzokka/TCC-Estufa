const axios = require('axios');

// Configuration
const API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:5000';
const FRONTEND_URL = process.env.FRONTEND_URL || 'http://localhost:3000';

console.log('üß™ Teste Completo de Notifica√ß√µes com Banco de Dados');
console.log('====================================================\n');

async function testCompleteNotifications() {
  try {
    console.log('üöÄ Enviando notifica√ß√µes completas...\n');

    // 1. Teste de notifica√ß√£o de bomba
    console.log('üíß Enviando notifica√ß√£o de bomba ativada...');
    const pumpResponse = await axios.post(`${API_BASE_URL}/test-notifications/pump-activated`, {
      duration: 45,
      waterAmount: 3.0,
      reason: 'Teste de irriga√ß√£o autom√°tica',
      greenhouseId: 'test-greenhouse',
      userId: 'test-user-id'
    });

    console.log('‚úÖ Resposta da bomba:', pumpResponse.data.message);
    console.log('   - ID salvo no banco:', pumpResponse.data.notification.id);
    console.log('   - Dura√ß√£o:', pumpResponse.data.notification.data.duration + 's');
    console.log('   - Quantidade:', pumpResponse.data.notification.data.waterAmount + 'L');

    await new Promise(resolve => setTimeout(resolve, 3000));

    // 2. Teste de notifica√ß√£o de irriga√ß√£o detectada
    console.log('\nüå± Enviando notifica√ß√£o de irriga√ß√£o detectada...');
    const irrigationResponse = await axios.post(`${API_BASE_URL}/test-notifications/irrigation-detected`, {
      moistureIncrease: 22.5,
      previousMoisture: 28.0,
      currentMoisture: 50.5,
      greenhouseId: 'test-greenhouse',
      userId: 'test-user-id'
    });

    console.log('‚úÖ Resposta da irriga√ß√£o:', irrigationResponse.data.message);
    console.log('   - ID salvo no banco:', irrigationResponse.data.notification.id);
    console.log('   - Aumento de umidade:', irrigationResponse.data.notification.data.moistureIncrease + '%');
    console.log('   - Umidade anterior:', irrigationResponse.data.notification.data.previousMoisture + '%');
    console.log('   - Umidade atual:', irrigationResponse.data.notification.data.currentMoisture + '%');

    await new Promise(resolve => setTimeout(resolve, 3000));

    // 3. Teste de notifica√ß√£o de confirma√ß√£o
    console.log('\n‚úÖ Enviando notifica√ß√£o de irriga√ß√£o confirmada...');
    const confirmationResponse = await axios.post(`${API_BASE_URL}/test-notifications/irrigation-confirmed`, {
      waterAmount: 4.0,
      notes: 'Teste de confirma√ß√£o manual',
      greenhouseId: 'test-greenhouse',
      userId: 'test-user-id'
    });

    console.log('‚úÖ Resposta da confirma√ß√£o:', confirmationResponse.data.message);
    console.log('   - ID salvo no banco:', confirmationResponse.data.notification.id);
    console.log('   - Quantidade confirmada:', confirmationResponse.data.notification.data.waterAmount + 'L');
    console.log('   - Observa√ß√µes:', confirmationResponse.data.notification.data.notes);

    await new Promise(resolve => setTimeout(resolve, 3000));

    console.log('\nüìä Resumo dos Testes:');
    console.log('====================');
    console.log('‚úÖ Notifica√ß√£o de bomba enviada e salva no banco');
    console.log('‚úÖ Notifica√ß√£o de irriga√ß√£o detectada enviada e salva no banco');
    console.log('‚úÖ Notifica√ß√£o de confirma√ß√£o enviada e salva no banco');

    console.log('\nüéâ Testes de notifica√ß√£o conclu√≠dos!');
    console.log('\nüåê Para testar no frontend:');
    console.log(`1. Acesse: ${FRONTEND_URL}/dashboard`);
    console.log('2. Verifique se as notifica√ß√µes aparecem no sino (üîî) no canto superior direito');
    console.log('3. Clique no sino para ver todas as notifica√ß√µes');
    console.log('4. Teste o bot√£o "Marcar como lida"');
    console.log('5. Verifique se o contador diminui ao marcar como lida');
    console.log('\nüîä Recursos implementados:');
    console.log('   - Som de notifica√ß√£o (se dispon√≠vel)');
    console.log('   - Contador de notifica√ß√µes n√£o lidas (9+ se > 9)');
    console.log('   - Persist√™ncia no banco de dados');
    console.log('   - Tempo relativo (x s, y m, z h)');
    console.log('   - Bot√£o para marcar como lida');
    console.log('   - Notifica√ß√µes persistem at√© serem lidas');

    console.log('\n‚úÖ Teste completo conclu√≠do!');

  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error.response?.data || error.message);
  }
}

// Executar teste
testCompleteNotifications();
