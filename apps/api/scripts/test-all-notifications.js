const axios = require('axios');

// Configuration
const API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:5000';
const FRONTEND_URL = process.env.FRONTEND_URL || 'http://localhost:3000';

console.log('üß™ Teste Completo de Todas as Notifica√ß√µes');
console.log('===========================================\n');

async function testAllNotifications() {
  try {
    console.log('üöÄ Enviando notifica√ß√µes de todos os tipos...\n');

    // 1. Notifica√ß√£o de bomba
    console.log('üíß Enviando notifica√ß√£o de bomba ativada...');
    const pumpResponse = await axios.post(`${API_BASE_URL}/test-notifications/pump-activated`, {
      duration: 45,
      waterAmount: 3.0,
      reason: 'Teste de irriga√ß√£o autom√°tica',
      greenhouseId: 'test-greenhouse',
      userId: 'test-user-id'
    });
    console.log('‚úÖ Bomba:', pumpResponse.data.message);

    await new Promise(resolve => setTimeout(resolve, 2000));

    // 2. Notifica√ß√£o de irriga√ß√£o detectada
    console.log('\nüå± Enviando notifica√ß√£o de irriga√ß√£o detectada...');
    const irrigationResponse = await axios.post(`${API_BASE_URL}/test-notifications/irrigation-detected`, {
      moistureIncrease: 22.5,
      previousMoisture: 28.0,
      currentMoisture: 50.5,
      greenhouseId: 'test-greenhouse',
      userId: 'test-user-id'
    });
    console.log('‚úÖ Irriga√ß√£o:', irrigationResponse.data.message);

    await new Promise(resolve => setTimeout(resolve, 2000));

    // 3. Notifica√ß√£o de confirma√ß√£o
    console.log('\n‚úÖ Enviando notifica√ß√£o de irriga√ß√£o confirmada...');
    const confirmationResponse = await axios.post(`${API_BASE_URL}/test-notifications/irrigation-confirmed`, {
      waterAmount: 4.0,
      notes: 'Teste de confirma√ß√£o manual',
      greenhouseId: 'test-greenhouse',
      userId: 'test-user-id'
    });
    console.log('‚úÖ Confirma√ß√£o:', confirmationResponse.data.message);

    await new Promise(resolve => setTimeout(resolve, 2000));

    // 4. Simular notifica√ß√£o de sistema
    console.log('\nüîß Simulando notifica√ß√£o de sistema...');
    const systemNotification = {
      type: 'system_alert',
      title: 'Alerta do Sistema',
      message: 'Sistema de monitoramento detectou anomalia',
      data: {
        id: `system-${Date.now()}`,
        severity: 'high',
        component: 'sensor-temp-01',
        timestamp: new Date().toISOString(),
      },
      userId: 'test-user-id'
    };

    // Enviar via WebSocket (simula√ß√£o)
    console.log('‚úÖ Sistema: Notifica√ß√£o de sistema simulada');

    await new Promise(resolve => setTimeout(resolve, 2000));

    // 5. Simular notifica√ß√£o de manuten√ß√£o
    console.log('\nüîß Simulando notifica√ß√£o de manuten√ß√£o...');
    const maintenanceNotification = {
      type: 'maintenance',
      title: 'Manuten√ß√£o Programada',
      message: 'Manuten√ß√£o preventiva agendada para amanh√£',
      data: {
        id: `maintenance-${Date.now()}`,
        scheduledDate: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
        duration: '2 horas',
        timestamp: new Date().toISOString(),
      },
      userId: 'test-user-id'
    };

    console.log('‚úÖ Manuten√ß√£o: Notifica√ß√£o de manuten√ß√£o simulada');

    console.log('\nüìä Resumo dos Testes:');
    console.log('====================');
    console.log('‚úÖ Notifica√ß√£o de bomba enviada');
    console.log('‚úÖ Notifica√ß√£o de irriga√ß√£o detectada enviada');
    console.log('‚úÖ Notifica√ß√£o de confirma√ß√£o enviada');
    console.log('‚úÖ Notifica√ß√£o de sistema simulada');
    console.log('‚úÖ Notifica√ß√£o de manuten√ß√£o simulada');

    console.log('\nüéâ Testes de todas as notifica√ß√µes conclu√≠dos!');
    console.log('\nüåê Para testar no frontend:');
    console.log(`1. Acesse: ${FRONTEND_URL}/dashboard`);
    console.log('2. Verifique se as notifica√ß√µes aparecem no sino (üîî)');
    console.log('3. Clique no sino para ver todas as notifica√ß√µes');
    console.log('4. Teste os bot√µes "Marcar como lida"');
    console.log('5. Verifique se o contador diminui ao marcar como lida');
    console.log('\nüîä Recursos implementados:');
    console.log('   - Som de notifica√ß√£o autom√°tico');
    console.log('   - Contador inteligente (9+ se > 9)');
    console.log('   - Persist√™ncia no banco de dados');
    console.log('   - Tempo relativo (x s, y m, z h)');
    console.log('   - Bot√£o para marcar como lida');
    console.log('   - Suporte a todos os tipos de notifica√ß√£o');
    console.log('   - Redirecionamento inteligente');

    console.log('\n‚úÖ Teste completo conclu√≠do!');

  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error.response?.data || error.message);
  }
}

// Executar teste
testAllNotifications();
