const axios = require('axios');

const API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:5000';

async function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

async function runTest() {
  console.log('üîî Teste WebSocket + Sync Autom√°tico');
  console.log('====================================');
  console.log('‚ö†Ô∏è  IMPORTANTE: Mantenha o frontend aberto em http://localhost:3000/dashboard');
  console.log('');

  console.log('üìù Enviando notifica√ß√µes via WebSocket (com sync autom√°tico)...');

  const notifications = [
    {
      name: 'Bomba Ativada - Sistema H√≠brido',
      endpoint: 'pump-activated',
      data: {
        userId: 'test-user-id',
        greenhouseId: 'greenhouse-teste',
        duration: 45,
        waterAmount: 3.5,
        reason: 'Teste de sistema h√≠brido'
      }
    },
    {
      name: 'Irriga√ß√£o Detectada - Sync Autom√°tico',
      endpoint: 'irrigation-detected',
      data: {
        userId: 'test-user-id',
        greenhouseId: 'greenhouse-teste',
        moistureIncrease: 25.0,
        previousMoisture: 30.0,
        currentMoisture: 55.0
      }
    },
    {
      name: 'Confirma√ß√£o - Persist√™ncia',
      endpoint: 'irrigation-confirmed',
      data: {
        userId: 'test-user-id',
        greenhouseId: 'greenhouse-teste',
        id: 'test-confirmation-123',
        waterAmount: 4.0,
        notes: 'Teste de persist√™ncia autom√°tica'
      }
    }
  ];

  for (let i = 0; i < notifications.length; i++) {
    const notification = notifications[i];

    try {
      console.log(`\n${i + 1}Ô∏è‚É£ Enviando: ${notification.name}...`);

      const response = await axios.post(`${API_BASE_URL}/test-notifications/${notification.endpoint}`, notification.data);

      console.log(`‚úÖ ${notification.name} enviada!`);
      console.log(`üîä Aguarde o som e verifique o frontend...`);
      console.log(`üì± O frontend deve fazer sync autom√°tico com o backend`);

      if (i < notifications.length - 1) {
        console.log('‚è≥ Aguardando 4 segundos...');
        await delay(4000);
      }

    } catch (error) {
      console.error(`‚ùå Erro ao enviar ${notification.name}:`, error.message);
    }
  }

  console.log('\nüìä Resumo do Teste:');
  console.log('‚úÖ 3 notifica√ß√µes enviadas via WebSocket');
  console.log('‚úÖ Frontend deve fazer sync autom√°tico');
  console.log('‚úÖ Som individual para cada notifica√ß√£o');
  console.log('‚úÖ Persist√™ncia autom√°tica no backend');

  console.log('\nüîç O que voc√™ deve ter observado:');
  console.log('   - 3 sons diferentes (um para cada notifica√ß√£o)');
  console.log('   - Notifica√ß√µes aparecendo em tempo real');
  console.log('   - Badge com contador atualizado');
  console.log('   - Console do navegador mostrando "Notifica√ß√£o salva no backend"');

  console.log('\nüéØ Teste de Refresh:');
  console.log('1. D√™ refresh na p√°gina (F5)');
  console.log('2. As notifica√ß√µes devem continuar l√°!');
  console.log('3. Sem som no refresh (apenas no carregamento inicial)');

  console.log('\n‚úÖ Teste WebSocket + Sync autom√°tico conclu√≠do!');
  console.log('üí° Sistema h√≠brido: WebSocket (tempo real) + Sync autom√°tico (persist√™ncia)');
}

runTest();
