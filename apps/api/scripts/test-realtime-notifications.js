const axios = require('axios');

const API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:5000';

async function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

async function runTest() {
  console.log('üîî Teste de Notifica√ß√µes em Tempo Real');
  console.log('======================================');
  console.log('‚ö†Ô∏è  IMPORTANTE: Mantenha o frontend aberto em http://localhost:3000/dashboard');
  console.log('‚ö†Ô∏è  Voc√™ deve ouvir um som para cada notifica√ß√£o que chegar!');
  console.log('');

  console.log('üìù Enviando notifica√ß√µes com intervalos de 5 segundos...');
  console.log('‚è∞ Aguarde 5 segundos entre cada notifica√ß√£o...');
  console.log('');

  const notifications = [
    {
      name: 'Bomba Ativada',
      endpoint: 'pump-activated',
      data: {
        userId: 'test-user-id',
        greenhouseId: 'test-greenhouse-id-1',
        duration: 45,
        waterAmount: 3.0,
        reason: 'Irriga√ß√£o autom√°tica - Tomate'
      }
    },
    {
      name: 'Irriga√ß√£o Detectada',
      endpoint: 'irrigation-detected',
      data: {
        userId: 'test-user-id',
        greenhouseId: 'test-greenhouse-id-1',
        moistureIncrease: 22.5,
        previousMoisture: 28.0,
        currentMoisture: 50.5
      }
    },
    {
      name: 'Confirma√ß√£o Manual',
      endpoint: 'irrigation-confirmed',
      data: {
        userId: 'test-user-id',
        greenhouseId: 'test-greenhouse-id-1',
        id: 'irrigation-123',
        waterAmount: 4.0,
        notes: 'Rega manual - Manh√£'
      }
    },
    {
      name: 'Alerta de Sistema',
      endpoint: 'pump-activated',
      data: {
        userId: 'test-user-id',
        greenhouseId: 'test-greenhouse-id-1',
        duration: 0,
        waterAmount: 0,
        reason: 'Alerta: Sensor de umidade offline'
      }
    },
    {
      name: 'Manuten√ß√£o Programada',
      endpoint: 'pump-activated',
      data: {
        userId: 'test-user-id',
        greenhouseId: 'test-greenhouse-id-1',
        duration: 30,
        waterAmount: 2.5,
        reason: 'Manuten√ß√£o: Limpeza do sistema'
      }
    }
  ];

  for (let i = 0; i < notifications.length; i++) {
    const notification = notifications[i];

    try {
      console.log(`\n${i + 1}Ô∏è‚É£ Enviando: ${notification.name}...`);

      await axios.post(`${API_BASE_URL}/test-notifications/${notification.endpoint}`, notification.data);

      console.log(`‚úÖ ${notification.name} enviada! üîä Aguarde o som...`);

      // Aguardar 5 segundos antes da pr√≥xima (exceto na √∫ltima)
      if (i < notifications.length - 1) {
        console.log('‚è≥ Aguardando 5 segundos para pr√≥xima notifica√ß√£o...');
        await delay(5000);
      }

    } catch (error) {
      console.error(`‚ùå Erro ao enviar ${notification.name}:`, error.message);
    }
  }

  console.log('\nüìä Resumo do Teste:');
  console.log('‚úÖ 5 notifica√ß√µes enviadas com intervalos de 5 segundos');
  console.log('üîä Cada notifica√ß√£o deve ter tocado um som individual');
  console.log('üì± Verifique o sino (üîî) no frontend para ver todas as notifica√ß√µes');

  console.log('\nüéØ O que voc√™ deve ter observado:');
  console.log('   - 5 sons diferentes (um para cada notifica√ß√£o)');
  console.log('   - Notifica√ß√µes aparecendo no sino em tempo real');
  console.log('   - Badge com contador de notifica√ß√µes n√£o lidas');
  console.log('   - Interface animada com Magic UI');

  console.log('\n‚úÖ Teste de notifica√ß√µes em tempo real conclu√≠do!');
  console.log('üí° Dica: D√™ refresh na p√°gina para verificar a persist√™ncia!');
}

runTest();
