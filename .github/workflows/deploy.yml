name: 🚀 Build & Deploy

on:
  push:
    branches: [main]
    tags: ['v*']
  release:
    types: [published]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: 🐳 Build & Push Docker Images
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api, web]
    
    outputs:
      api-image: ${{ steps.meta-api.outputs.tags }}
      web-image: ${{ steps.meta-web.outputs.tags }}
      api-digest: ${{ steps.build-api.outputs.digest }}
      web-digest: ${{ steps.build-web.outputs.digest }}

    permissions:
      contents: read
      packages: write

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📋 Extract metadata (API)
        if: matrix.service == 'api'
        id: meta-api
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-

      - name: 📋 Extract metadata (Web)
        if: matrix.service == 'web'
        id: meta-web
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-

      - name: 🐳 Build and push API image
        if: matrix.service == 'api'
        id: build-api
        uses: docker/build-push-action@v5
        with:
          context: ./apps/api
          file: ./apps/api/Dockerfile
          push: true
          tags: ${{ steps.meta-api.outputs.tags }}
          labels: ${{ steps.meta-api.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

      - name: 🐳 Build and push Web image
        if: matrix.service == 'web'
        id: build-web
        uses: docker/build-push-action@v5
        with:
          context: ./apps/web
          file: ./apps/web/Dockerfile
          push: true
          tags: ${{ steps.meta-web.outputs.tags }}
          labels: ${{ steps.meta-web.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    strategy:
      matrix:
        service: [api, web]

    steps:
      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'

      - name: 📊 Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

  deploy-staging:
    name: 🎭 Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [build-and-push, security-scan]
    environment: staging

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to staging environment
        run: |
          echo "🚀 Deploying to staging..."
          echo "API Image: ${{ needs.build-and-push.outputs.api-image }}"
          echo "Web Image: ${{ needs.build-and-push.outputs.web-image }}"
          
          # Here you would typically:
          # 1. Connect to your staging environment
          # 2. Update docker-compose files with new image tags
          # 3. Run docker-compose up -d
          # 4. Run health checks
          
          echo "✅ Staging deployment completed"

      - name: 🧪 Run staging health checks
        run: |
          echo "🧪 Running staging health checks..."
          
          # Wait for services to start
          sleep 30
          
          # Health check API
          # curl -f http://staging-api.youromain.com/health || exit 1
          
          # Health check Web
          # curl -f http://staging.yourdomain.com/api/health || exit 1
          
          echo "✅ All staging health checks passed"

  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build-and-push, security-scan]
    environment: production

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🌟 Deploy to production environment
        run: |
          echo "🌟 Deploying to production..."
          echo "API Image: ${{ needs.build-and-push.outputs.api-image }}"
          echo "Web Image: ${{ needs.build-and-push.outputs.web-image }}"
          
          # Here you would typically:
          # 1. Connect to your production environment
          # 2. Update docker-compose files with new image tags
          # 3. Run rolling deployment
          # 4. Run comprehensive health checks
          
          echo "✅ Production deployment completed"

      - name: 🧪 Run production health checks
        run: |
          echo "🧪 Running production health checks..."
          
          # Wait for services to start
          sleep 60
          
          # Health check API
          # curl -f https://api.yourdomain.com/health || exit 1
          
          # Health check Web
          # curl -f https://yourdomain.com/api/health || exit 1
          
          echo "✅ All production health checks passed"

      - name: 📢 Create deployment summary
        run: |
          echo "## 🚀 Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Service | Image | Digest |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| API | ${{ needs.build-and-push.outputs.api-image }} | ${{ needs.build-and-push.outputs.api-digest }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Web | ${{ needs.build-and-push.outputs.web-image }} | ${{ needs.build-and-push.outputs.web-digest }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎉 **Deployment completed successfully!**" >> $GITHUB_STEP_SUMMARY
          echo "🌟 Version: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "📅 Deployed at: $(date)" >> $GITHUB_STEP_SUMMARY
