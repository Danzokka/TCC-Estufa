---
globs: turbo.json,package.json,apps/*/package.json
---

# Gerenciamento de Monorepo - Turborepo

## Estrutura do Monorepo

O projeto utiliza Turborepo para gerenciar múltiplas aplicações em um único repositório:

```
TCC-Estufa/
├── apps/
│   ├── web/          # Next.js Frontend
│   ├── api/          # NestJS Backend
│   ├── esp/          # ESP32 Firmware
│   └── ai/           # Python AI/ML
├── packages/
│   ├── ui/           # Componentes compartilhados
│   ├── eslint-config/ # Configurações ESLint
│   └── typescript-config/ # Configurações TypeScript
├── turbo.json        # Configuração Turborepo
└── package.json      # Root package.json
```

## Configuração Turborepo

### turbo.json

```json
{
  "$schema": "https://turbo.build/schema.json",
  "globalDependencies": ["**/.env.*local"],
  "pipeline": {
    "build": {
      "dependsOn": ["^build"],
      "outputs": [".next/**", "!.next/cache/**", "dist/**"]
    },
    "dev": {
      "cache": false,
      "persistent": true
    },
    "lint": {
      "dependsOn": ["^lint"]
    },
    "test": {
      "dependsOn": ["^build"],
      "outputs": ["coverage/**"]
    },
    "type-check": {
      "dependsOn": ["^type-check"]
    }
  }
}
```

## Scripts de Desenvolvimento

### Root Package.json

```json
{
  "scripts": {
    "dev": "turbo run dev",
    "build": "turbo run build",
    "lint": "turbo run lint",
    "test": "turbo run test",
    "clean": "turbo run clean",
    "type-check": "turbo run type-check"
  }
}
```

### Comandos Específicos

```bash
# Desenvolvimento completo
npm run dev

# Apenas frontend
npm run dev --filter=web

# Apenas backend
npm run dev --filter=api

# Múltiplas apps
npm run dev --filter=web --filter=api

# Com dependências
npm run build --filter=web...
```

## Packages Compartilhados

### UI Package

```typescript
// packages/ui/src/button.tsx
export interface ButtonProps {
  variant?: 'primary' | 'secondary' | 'danger';
  size?: 'sm' | 'md' | 'lg';
  children: React.ReactNode;
}

export function Button({ variant = 'primary', size = 'md', children }: ButtonProps) {
  return (
    <button
      className={cn(
        'rounded font-medium',
        variants[variant],
        sizes[size]
      )}
    >
      {children}
    </button>
  );
}
```

### ESLint Config

```javascript
// packages/eslint-config/next.js
module.exports = {
  extends: ["./base.js", "next/core-web-vitals"],
  rules: {
    "@next/next/no-img-element": "error",
    "react-hooks/exhaustive-deps": "warn",
  },
};
```

### TypeScript Config

```json
// packages/typescript-config/nextjs.json
{
  "extends": "./base.json",
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "es6"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
```

## Dependências Compartilhadas

### Root Package.json

```json
{
  "devDependencies": {
    "turbo": "^1.10.0",
    "@types/node": "^20.0.0",
    "typescript": "^5.0.0",
    "eslint": "^8.0.0"
  }
}
```

### App-specific Dependencies

```json
// apps/web/package.json
{
  "dependencies": {
    "@tcc/ui": "workspace:*",
    "@tcc/eslint-config": "workspace:*",
    "@tcc/typescript-config": "workspace:*"
  }
}
```

## Build e Deploy

### Pipeline de Build

```bash
# Build completo
turbo run build

# Build com cache
turbo run build --cache-dir=.turbo

# Build específico
turbo run build --filter=web
```

### Docker Multi-stage

```dockerfile
# Multi-stage build para otimização
FROM node:18-alpine AS base
WORKDIR /app
COPY package*.json ./
RUN npm ci

FROM base AS web-builder
COPY apps/web ./apps/web
COPY packages ./packages
RUN npm run build --filter=web

FROM base AS api-builder
COPY apps/api ./apps/api
RUN npm run build --filter=api
```

## Workspace Management

### Linking de Packages

```bash
# Instalar dependências em todos os workspaces
npm install

# Adicionar dependência a workspace específico
npm install react --workspace=apps/web

# Executar script em workspace específico
npm run dev --workspace=apps/api
```

### Versionamento

```json
// Usar workspace protocol para dependências internas
{
  "dependencies": {
    "@tcc/ui": "workspace:*",
    "@tcc/shared-types": "workspace:^1.0.0"
  }
}
```

## CI/CD Integration

### GitHub Actions

```yaml
name: CI
on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Test
        run: npm run test

      - name: Lint
        run: npm run lint
```

### Cache Strategy

```yaml
# Turbo cache para builds mais rápidos
- name: Restore Turbo Cache
  uses: actions/cache@v3
  with:
    path: .turbo
    key: turbo-${{ github.sha }}
    restore-keys: turbo-
```

## Debugging e Troubleshooting

### Logs Detalhados

```bash
# Verbose logging
turbo run dev --verbose

# Debug específico
turbo run build --filter=web --dry-run
```

### Limpeza de Cache

```bash
# Limpar cache do Turbo
turbo run clean

# Limpar node_modules
rm -rf node_modules apps/*/node_modules packages/*/node_modules
npm install
```

### Dependências Circulares

```bash
# Verificar dependências
npm ls --depth=0

# Resolver conflitos
npm install --force
```
