---
globs: apps/api/**/*.ts,apps/api/**/*.js
description: Regras para desenvolvimento do backend NestJS
---

# Backend NestJS - TCC-Estufa

Utiliza em desenvolvimento a porta 5000

## Estrutura de Módulos

O backend está organizado em módulos principais:

### 🏗️ Módulos Principais

- **auth/** - Autenticação e autorização
- **greenhouse/** - Gestão de estufas
- **sensor/** - Coleta e processamento de dados dos sensores
- **irrigation/** - Controle de irrigação
- **pump/** - Gestão de bombas
- **plant/** - Gestão de plantas
- **user/** - Gestão de usuários
- **blog/** - Sistema de blog
- **websocket/** - Comunicação em tempo real

### 🗄️ Banco de Dados

- **Prisma ORM** com PostgreSQL
- Schema principal: [apps/api/prisma/schema.prisma](mdc:apps/api/prisma/schema.prisma)
- Migrações: [apps/api/prisma/migrations/](mdc:apps/api/prisma/migrations/)

### 🔧 Padrões de Desenvolvimento

- Use DTOs para validação de entrada
- Implemente guards para autenticação/autorização
- Use decorators do Swagger para documentação da API
- Mantenha logs estruturados com Winston
- Use WebSockets para comunicação em tempo real

### 📝 Exemplo de Estrutura de Módulo

```typescript
@Module({
  imports: [PrismaModule],
  controllers: [FeatureController],
  providers: [FeatureService],
  exports: [FeatureService],
})
export class FeatureModule {}
```

### 🧪 Testes

- Scripts de teste: `npm run test:irrigation`, `npm run test:frontend-notifications`
- Testes E2E configurados em [apps/api/test/](mdc:apps/api/test/)
