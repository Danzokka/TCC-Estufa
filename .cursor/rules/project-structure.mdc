---
alwaysApply: true
---

# Estrutura do Projeto TCC-Estufa

Este √© um projeto de monorepo para uma estufa inteligente que utiliza Turborepo e pnpm como gerenciador de pacotes.

## Arquitetura Principal

O projeto est√° organizado em 4 aplica√ß√µes principais:

### üìÅ apps/

- **api/** - Backend NestJS com Prisma ORM e PostgreSQL
  - Ponto de entrada: [apps/api/src/main.ts](mdc:apps/api/src/main.ts)
  - Schema do banco: [apps/api/prisma/schema.prisma](mdc:apps/api/prisma/schema.prisma)
  - Configura√ß√£o: [apps/api/package.json](mdc:apps/api/package.json)

- **web/** - Frontend Next.js PWA com React
  - Ponto de entrada: [apps/web/src/app/page.tsx](mdc:apps/web/src/app/page.tsx)
  - Configura√ß√£o: [apps/web/package.json](mdc:apps/web/package.json)
  - Componentes: [apps/web/src/components/](mdc:apps/web/src/components/)

- **esp/** - Firmware para ESP32 (Arduino/PlatformIO)
  - C√≥digo principal: [apps/esp/src/main.cpp](mdc:apps/esp/src/main.cpp)
  - Configura√ß√£o: [apps/esp/platformio.ini](mdc:apps/seat/platformio.ini)

- **ai/** - Servi√ßo de IA para an√°lise e previs√µes
  - Ponto de entrada: [apps/ai/main.py](mdc:apps/ai/main.py)
  - Modelos: [apps/ai/models/](mdc:apps/ai/models/)

### üìÅ packages/

- **ui/** - Componentes compartilhados de UI
- **eslint-config/** - Configura√ß√µes ESLint compartilhadas
- **typescript-config/** - Configura√ß√µes TypeScript compartilhadas

## Fluxo de Dados

1. ESP32 coleta dados dos sensores
2. API NestJS recebe e processa dados
3. Frontend Next.js exibe dados em tempo real
4. Servi√ßo de IA analisa e fornece recomenda√ß√µes

## Comandos Principais

- `pnpm dev` - Executa todos os servi√ßos em desenvolvimento
- `pnpm build` - Build de produ√ß√£o
- `pnpm lint` - Linting do c√≥digo
- `pnpm format` - Formata√ß√£o com Prettier
