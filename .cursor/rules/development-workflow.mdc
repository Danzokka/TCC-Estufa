---
alwaysApply: true
---

# Workflow de Desenvolvimento - TCC-Estufa

## 🛠️ Gerenciamento de Pacotes

### pnpm como Package Manager

- **SEMPRE use pnpm** para instalar dependências
- **NÃO use npm ou yarn** - o projeto está configurado para pnpm
- Comandos principais:
  - `pnpm install` - Instalar dependências
  - `pnpm add <package>` - Adicionar nova dependência
  - `pnpm run dev` - Executar em desenvolvimento
  - `pnpm run build` - Build de produção

## 🏗️ Monorepo com Turborepo

### Estrutura de Workspace

- Configuração: [pnpm-workspace.yaml](mdc:pnpm-workspace.yaml)
- Tasks configuradas: [turbo.json](mdc:turbo.json)
- Workspaces: `apps/*` e `packages/*`

### Comandos de Desenvolvimento

- `pnpm dev` - Executa todos os serviços simultaneamente
- `pnpm build` - Build de todos os projetos
- `pnpm lint` - Linting de todo o codebase
- `pnpm format` - Formatação com Prettier

## 🐳 Docker e Deploy

### Containerização

- **docker-compose.yml** na raiz para orquestração
- Dockerfiles individuais em cada app
- PostgreSQL como banco principal

### Scripts Úteis

- `pnpm clean` - Limpar builds e node_modules
- `pnpm setup` - Setup completo do projeto
- `pnpm install:clean` - Instalação limpa

## 📝 Padrões de Código

### TypeScript

- Use TypeScript em todos os projetos
- Configurações compartilhadas em [packages/typescript-config/](mdc:packages/typescript-config/)

### ESLint e Prettier

- Configurações compartilhadas em [packages/eslint-config/](mdc:packages/eslint-config/)
- Formatação automática com Prettier

### Git Workflow

- Branch principal: `main`
- Use commits descritivos
- Mantenha o histórico limpo

## 🧪 Testes e Qualidade

### Testes por Projeto

- **API**: Jest + Supertest para testes E2E
- **Web**: Jest + Testing Library
- **ESP**: Testes manuais e scripts Python

### Qualidade de Código

- Linting obrigatório antes de commits
- Formatação consistente
- Tipagem TypeScript rigorosa
