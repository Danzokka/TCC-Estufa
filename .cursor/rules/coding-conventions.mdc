---
globs: *.ts,*.tsx,*.js,*.jsx,*.py,*.cpp,*.h
description: Conven√ß√µes de c√≥digo para o projeto TCC-Estufa
---

# Conven√ß√µes de C√≥digo - TCC-Estufa

## üìù Conven√ß√µes Gerais

### Nomenclatura

- **camelCase** para vari√°veis e fun√ß√µes
- **PascalCase** para classes e componentes
- **SCREAMING_SNAKE_CASE** para constantes
- **kebab-case** para arquivos e pastas

### Coment√°rios

- Use **portugu√™s** para coment√°rios explicativos
- Documente fun√ß√µes complexas
- Mantenha coment√°rios atualizados

## üé® Frontend (Next.js/React)

### Componentes

```typescript
// ‚úÖ Bom
export function SensorCard({ sensor, value }: SensorCardProps) {
  return (
    <div className="rounded-lg border p-4">
      <h3 className="font-semibold">{sensor.name}</h3>
      <p className="text-2xl font-bold">{value}</p>
    </div>
  );
}

// ‚ùå Evitar
export function sensorCard(props) {
  return <div>{props.sensor.name}: {props.value}</div>;
}
```

### Hooks

- Use hooks customizados para l√≥gica reutiliz√°vel
- Prefira `useQuery` para dados da API
- Use `useState` para estado local simples

### Styling

- **Tailwind CSS** para estiliza√ß√£o
- Use classes utilit√°rias
- Mantenha consist√™ncia visual

## üîß Backend (NestJS)

### Estrutura de M√≥dulos

```typescript
// ‚úÖ Bom
@Module({
  imports: [PrismaModule, ConfigModule],
  controllers: [SensorController],
  providers: [SensorService],
  exports: [SensorService],
})
export class SensorModule {}
```

### DTOs e Valida√ß√£o

```typescript
// ‚úÖ Bom
export class CreateSensorDto {
  @IsString()
  @IsNotEmpty()
  name: string;

  @IsNumber()
  @Min(0)
  @Max(100)
  value: number;
}
```

### Services

- Use **dependency injection**
- Mantenha m√©todos pequenos e focados
- Implemente tratamento de erros robusto

## ü§ñ IA (Python)

### Estrutura de Fun√ß√µes

```python
# ‚úÖ Bom
def process_sensor_data(data: pd.DataFrame) -> Dict[str, float]:
    """
    Processa dados dos sensores e retorna estat√≠sticas.

    Args:
        data: DataFrame com dados dos sensores

    Returns:
        Dict com estat√≠sticas processadas
    """
    # Implementa√ß√£o aqui
    pass
```

### Imports

- Organize imports por categoria
- Use imports absolutos quando poss√≠vel
- Mantenha imports limpos

## üîå ESP32 (C++)

### Estrutura de Classes

```cpp
// ‚úÖ Bom
class SensorManager {
private:
    int pin;
    float lastValue;

public:
    SensorManager(int sensorPin);
    float readValue();
    bool isConnected();
};
```

### Naming Conventions

- **snake_case** para vari√°veis e fun√ß√µes
- **PascalCase** para classes
- **UPPER_CASE** para constantes e defines

## üìä Banco de Dados

### Schema Prisma

```prisma
// ‚úÖ Bom
model Sensor {
  id        String   @id @default(uuid())
  name      String   @unique
  value     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sensors")
}
```

### Migrations

- Use nomes descritivos para migrations
- Mantenha migrations pequenas e focadas
- Sempre teste migrations em desenvolvimento

## üß™ Testes

### Estrutura de Testes

```typescript
// ‚úÖ Bom
describe("SensorService", () => {
  let service: SensorService;

  beforeEach(async () => {
    const module = await Test.createTestingModule({
      providers: [SensorService],
    }).compile();

    service = module.get<SensorService>(SensorService);
  });

  it("should create a sensor", async () => {
    const result = await service.create(mockSensorData);
    expect(result).toBeDefined();
  });
});
```

## üìù Documenta√ß√£o

### README

- Mantenha README atualizado
- Inclua instru√ß√µes de instala√ß√£o
- Documente APIs principais

### Coment√°rios de C√≥digo

- Use JSDoc para fun√ß√µes TypeScript
- Documente par√¢metros e retornos
- Mantenha exemplos de uso quando necess√°rio
