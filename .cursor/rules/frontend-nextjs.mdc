---
globs: apps/web/**/*.tsx,apps/web/**/*.ts,apps/web/**/*.js,apps/web/**/*.jsx
description: Regras para desenvolvimento do frontend Next.js
---

# Frontend Next.js - TCC-Estufa

## Tecnologias e Padrões

### 🎨 Stack Principal

- **Next.js 15** com App Router
- **React 19** com TypeScript
- **Tailwind CSS** para estilização
- **Radix UI** para componentes acessíveis
- **React Query** para gerenciamento de estado
- **Socket.io** para comunicação em tempo real

### 📁 Estrutura de Arquivos

- **app/** - App Router do Next.js
  - Páginas principais: [apps/web/src/app/](mdc:apps/web/src/app/)
- **components/** - Componentes reutilizáveis
  - Componentes UI: [apps/web/src/components/](mdc:apps/web/src/components/)
- **hooks/** - Hooks customizados
- **context/** - Contextos React
- **lib/** - Utilitários e configurações

### 🎯 Funcionalidades Principais

- **Dashboard** em tempo real com dados dos sensores
- **Controle de Irrigação** simplificado via IP direto do ESP32
- **Configuração de Dispositivos** via interface web
- **Gráficos Históricos** de medições
- **Sistema PWA** para uso mobile

### 🔧 Padrões de Desenvolvimento

- Use Server Components quando possível
- Implemente Client Components apenas quando necessário
- Use React Query para cache e sincronização de dados
- Implemente loading states e error boundaries
- Use Tailwind CSS para estilização consistente
- Mantenha componentes pequenos e reutilizáveis

### 📱 PWA Features

- Service Worker configurado: [apps/web/public/sw.js](mdc:apps/web/public/sw.js)
- Manifest para instalação mobile
- HTTPS obrigatório para funcionamento

### 🧪 Testes

- Jest configurado para testes unitários
- Testing Library para testes de componentes
- Scripts: `npm run test`, `npm run test:watch`, `npm run test:coverage`
